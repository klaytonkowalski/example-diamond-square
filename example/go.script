--------------------------------------------------------------------------------
-- LICENSE
--------------------------------------------------------------------------------

-- Copyright (c) 2024 Klayton Kowalski

-- This software is provided 'as-is', without any express or implied warranty.
-- In no event will the authors be held liable for any damages arising from the use of this software.

-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it freely,
-- subject to the following restrictions:

-- 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
--    If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.

-- 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.

-- 3. This notice may not be removed or altered from any source distribution.

--------------------------------------------------------------------------------
-- INFORMATION
--------------------------------------------------------------------------------

-- GitHub: https://github.com/whiteboxdev/example-diamond-square

----------------------------------------------------------------------
-- DEPENDENCIES
----------------------------------------------------------------------

local h_str = require "example.h_str"

----------------------------------------------------------------------
-- CONSTANTS
----------------------------------------------------------------------

local height_nil = 0
local height_min = 1
local height_max = 16
local height_map_size = 129

----------------------------------------------------------------------
-- PROPERTIES
----------------------------------------------------------------------

go.property("tilesource_1", resource.tile_source("/example/tilesource_1.tilesource"))
go.property("tilesource_2", resource.tile_source("/example/tilesource_2.tilesource"))

local height_map = {}
local random_scalar_start = 8
local random_scalar = random_scalar_start

----------------------------------------------------------------------
-- FUNCTIONS
----------------------------------------------------------------------

local function draw()
	for i = 1, height_map_size do
		for j = 1, height_map_size do
			tilemap.set_tile("#tilemap", "layer1", j, i, height_map[i][j])
		end
	end
end

local function round(value)
	local result = math.abs(math.ceil(value) - value) > math.abs(value - math.floor(value)) and math.floor(value) or math.ceil(value)
	if result < height_min then
		return height_min
	end
	if result > height_max then
		return height_max
	end
	return result
end

local function random()
	return math.random(-1, 1) * random_scalar
end

local function init_height_map()
	height_map = {}
	for i = 1, height_map_size do
		height_map[i] = {}
		for j = 1, height_map_size do
			height_map[i][j] = height_nil
		end
	end
end

local function diamond_square()
	init_height_map()
	random_scalar = random_scalar_start
	height_map[1][1] = math.random(height_min, height_max)
	height_map[1][height_map_size] = math.random(height_min, height_max)
	height_map[height_map_size][1] = math.random(height_min, height_max)
	height_map[height_map_size][height_map_size] = math.random(height_min, height_max)
	local chunk_size = height_map_size - 1
	while chunk_size > 1 do
		local chunk_size_half = chunk_size / 2
		for y = 1, height_map_size - 1, chunk_size do
			for x = 1, height_map_size - 1, chunk_size do
				height_map[y + chunk_size_half][x + chunk_size_half] = round((height_map[y][x] + height_map[y][x + chunk_size] + height_map[y + chunk_size][x] + height_map[y + chunk_size][x + chunk_size]) / 4 + random())
			end
		end
		for y = 1, height_map_size, chunk_size_half do
			for x = (y + chunk_size_half) % chunk_size, height_map_size, chunk_size do
				-- Line 111 below is only required because Lua's arrays are 1-indexed.
				-- In 0-indexed languages, the modulus used on line 108 above works without correction.
				if x == 0 then x = chunk_size end
				local sum = 0
				local count = 0
				if x - chunk_size_half > 0 then
					sum = sum + height_map[y][x - chunk_size_half]
					count = count + 1
				end
				if x + chunk_size_half <= height_map_size then
					sum = sum + height_map[y][x + chunk_size_half]
					count = count + 1
				end
				if y - chunk_size_half > 0 then
					sum = sum + height_map[y - chunk_size_half][x]
					count = count + 1
				end
				if y + chunk_size_half <= height_map_size then
					sum = sum + height_map[y + chunk_size_half][x]
					count = count + 1
				end
				height_map[y][x] = round(sum / count + random())
			end
		end
		chunk_size = chunk_size / 2
		random_scalar = math.max(random_scalar / 2, 0.1)
	end
end

function init(self)
	msg.post("#", h_str.acquire_input_focus)
	math.randomseed(os.clock() * 100000000000)
	diamond_square()
	draw()
end

function on_input(self, action_id, action)
	if action.pressed then
		if action_id == h_str.button_left then
			diamond_square()
			draw()
		elseif action_id == h_str.one then
			go.set("#tilemap", "tile_source", self.tilesource_1)
		elseif action_id == h_str.two then
			go.set("#tilemap", "tile_source", self.tilesource_2)
		elseif action_id == h_str.three then
			random_scalar_start = random_scalar_start - 1
			if random_scalar_start < 0 then
				random_scalar_start = 0
			else
				msg.post("#gui", h_str.update_random_scalar, { value = random_scalar_start })
				diamond_square()
				draw()
			end
		elseif action_id == h_str.four then
			random_scalar_start = random_scalar_start + 1
			if random_scalar_start > height_max then
				random_scalar_start = height_max
			else
				msg.post("#gui", h_str.update_random_scalar, { value = random_scalar_start })
				diamond_square()
				draw()
			end
		end
	end
end